"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from griddy.nfl import errors, models, utils
from griddy.nfl._hooks import HookContext
from griddy.nfl.types import OptionalNullable, UNSET
from griddy.nfl.utils.unmarshal_json_response import unmarshal_json_response
from typing import List, Mapping, Optional


class ContentInsights(BaseSDK):
    r"""Editorial insights and analytics content about NFL players and games"""

    def get_season_content_insights(
        self,
        *,
        season: int,
        limit: Optional[int] = 20,
        tags: Optional[List[models.QueryParamTags]] = None,
        team_id: Optional[str] = None,
        nfl_id: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> Optional[List[models.Insight]]:
        r"""Get Season Content Insights

        Retrieves curated editorial insights and analytics content for NFL players during
        a specified season. Returns expert commentary combining Next Gen Stats data with
        editorial analysis, including pregame previews, postgame breakdowns, fantasy insights,
        and evergreen content. Supports filtering by player, team, content tags, and publication
        limits for targeted content discovery.


        :param season: Season year
        :param limit: Maximum number of insights to return
        :param tags: Content tags to filter by (supports multiple comma-separated tags)
        :param team_id: Filter by specific team identifier
        :param nfl_id: Filter by specific player NFL identifier
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = models.GET_SEASON_CONTENT_INSIGHTS_OP_SERVERS[0]

        request = models.GetSeasonContentInsightsRequest(
            season=season,
            limit=limit,
            tags=tags,
            team_id=team_id,
            nfl_id=nfl_id,
        )

        req = self._build_request(
            method="GET",
            path="/api/content/insights/season",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="getSeasonContentInsights",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "401", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(Optional[List[models.Insight]], http_res)
        if utils.match_response(http_res, ["400", "401", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GriddyNFLError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, ["500", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GriddyNFLError("API error occurred", http_res, http_res_text)

        raise errors.GriddyNFLError("Unexpected response received", http_res)

    async def get_season_content_insights_async(
        self,
        *,
        season: int,
        limit: Optional[int] = 20,
        tags: Optional[List[models.QueryParamTags]] = None,
        team_id: Optional[str] = None,
        nfl_id: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> Optional[List[models.Insight]]:
        r"""Get Season Content Insights

        Retrieves curated editorial insights and analytics content for NFL players during
        a specified season. Returns expert commentary combining Next Gen Stats data with
        editorial analysis, including pregame previews, postgame breakdowns, fantasy insights,
        and evergreen content. Supports filtering by player, team, content tags, and publication
        limits for targeted content discovery.


        :param season: Season year
        :param limit: Maximum number of insights to return
        :param tags: Content tags to filter by (supports multiple comma-separated tags)
        :param team_id: Filter by specific team identifier
        :param nfl_id: Filter by specific player NFL identifier
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = models.GET_SEASON_CONTENT_INSIGHTS_OP_SERVERS[0]

        request = models.GetSeasonContentInsightsRequest(
            season=season,
            limit=limit,
            tags=tags,
            team_id=team_id,
            nfl_id=nfl_id,
        )

        req = self._build_request_async(
            method="GET",
            path="/api/content/insights/season",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="getSeasonContentInsights",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "401", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(Optional[List[models.Insight]], http_res)
        if utils.match_response(http_res, ["400", "401", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GriddyNFLError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, ["500", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GriddyNFLError("API error occurred", http_res, http_res_text)

        raise errors.GriddyNFLError("Unexpected response received", http_res)
