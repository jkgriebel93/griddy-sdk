"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from griddy.nfl import errors, models, utils
from griddy.nfl._hooks import HookContext
from griddy.nfl.types import BaseModel, OptionalNullable, UNSET
from griddy.nfl.utils.unmarshal_json_response import unmarshal_json_response
from typing import Mapping, Optional, Union, cast


class PlayerRushingStatistics(BaseSDK):
    r"""Individual player rushing statistics and analytics"""

    def get_player_rushing_stats_by_season(
        self,
        *,
        request: Union[
            models.GetPlayerRushingStatsBySeasonRequest,
            models.GetPlayerRushingStatsBySeasonRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> Optional[models.RushingStatsResponse]:
        r"""Get Player Rushing Statistics by Season

        Retrieves comprehensive rushing statistics for NFL players during a specified season.
        Returns detailed metrics including traditional stats, advanced analytics, and Next Gen Stats
        data. Supports filtering by teams, qualified rushers, and various sorting options.
        Data includes yards per carry, EPA (Expected Points Added), RYOE (Rush Yards Over Expected),
        efficiency metrics, yards before/after contact, and situational breakdowns.


        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = models.GET_PLAYER_RUSHING_STATS_BY_SEASON_OP_SERVERS[0]

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(
                request, models.GetPlayerRushingStatsBySeasonRequest
            )
        request = cast(models.GetPlayerRushingStatsBySeasonRequest, request)

        req = self._build_request(
            method="GET",
            path="/api/secured/stats/players-offense/rushing/season",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="getPlayerRushingStatsBySeason",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "401", "403", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                Optional[models.RushingStatsResponse], http_res
            )
        if utils.match_response(http_res, ["400", "401", "403", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GriddyNFLError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, ["500", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GriddyNFLError("API error occurred", http_res, http_res_text)

        raise errors.GriddyNFLError("Unexpected response received", http_res)

    async def get_player_rushing_stats_by_season_async(
        self,
        *,
        request: Union[
            models.GetPlayerRushingStatsBySeasonRequest,
            models.GetPlayerRushingStatsBySeasonRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> Optional[models.RushingStatsResponse]:
        r"""Get Player Rushing Statistics by Season

        Retrieves comprehensive rushing statistics for NFL players during a specified season.
        Returns detailed metrics including traditional stats, advanced analytics, and Next Gen Stats
        data. Supports filtering by teams, qualified rushers, and various sorting options.
        Data includes yards per carry, EPA (Expected Points Added), RYOE (Rush Yards Over Expected),
        efficiency metrics, yards before/after contact, and situational breakdowns.


        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = models.GET_PLAYER_RUSHING_STATS_BY_SEASON_OP_SERVERS[0]

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(
                request, models.GetPlayerRushingStatsBySeasonRequest
            )
        request = cast(models.GetPlayerRushingStatsBySeasonRequest, request)

        req = self._build_request_async(
            method="GET",
            path="/api/secured/stats/players-offense/rushing/season",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="getPlayerRushingStatsBySeason",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "401", "403", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                Optional[models.RushingStatsResponse], http_res
            )
        if utils.match_response(http_res, ["400", "401", "403", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GriddyNFLError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, ["500", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GriddyNFLError("API error occurred", http_res, http_res_text)

        raise errors.GriddyNFLError("Unexpected response received", http_res)

    def get_player_rushing_stats_by_week(
        self,
        *,
        request: Union[
            models.GetPlayerRushingStatsByWeekRequest,
            models.GetPlayerRushingStatsByWeekRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> Optional[models.WeeklyRushingStatsResponse]:
        r"""Get Player Rushing Statistics by Week

        Retrieves comprehensive rushing statistics for NFL players during a specified week and season.
        Returns detailed metrics including traditional stats, advanced analytics, and Next Gen Stats
        data. Supports filtering by teams, qualified rushers, and various sorting options.
        Data includes yards per carry, EPA (Expected Points Added), RYOE (Rush Yards Over Expected),
        efficiency metrics, yards before/after contact, and game-specific context.


        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = models.GET_PLAYER_RUSHING_STATS_BY_WEEK_OP_SERVERS[0]

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(
                request, models.GetPlayerRushingStatsByWeekRequest
            )
        request = cast(models.GetPlayerRushingStatsByWeekRequest, request)

        req = self._build_request(
            method="GET",
            path="/api/secured/stats/players-offense/rushing/week",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="getPlayerRushingStatsByWeek",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "401", "403", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                Optional[models.WeeklyRushingStatsResponse], http_res
            )
        if utils.match_response(http_res, ["400", "401", "403", "4XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GriddyNFLError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, ["500", "5XX"], "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.GriddyNFLError("API error occurred", http_res, http_res_text)

        raise errors.GriddyNFLError("Unexpected response received", http_res)

    async def get_player_rushing_stats_by_week_async(
        self,
        *,
        request: Union[
            models.GetPlayerRushingStatsByWeekRequest,
            models.GetPlayerRushingStatsByWeekRequestTypedDict,
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> Optional[models.WeeklyRushingStatsResponse]:
        r"""Get Player Rushing Statistics by Week

        Retrieves comprehensive rushing statistics for NFL players during a specified week and season.
        Returns detailed metrics including traditional stats, advanced analytics, and Next Gen Stats
        data. Supports filtering by teams, qualified rushers, and various sorting options.
        Data includes yards per carry, EPA (Expected Points Added), RYOE (Rush Yards Over Expected),
        efficiency metrics, yards before/after contact, and game-specific context.


        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = models.GET_PLAYER_RUSHING_STATS_BY_WEEK_OP_SERVERS[0]

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(
                request, models.GetPlayerRushingStatsByWeekRequest
            )
        request = cast(models.GetPlayerRushingStatsByWeekRequest, request)

        req = self._build_request_async(
            method="GET",
            path="/api/secured/stats/players-offense/rushing/week",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="getPlayerRushingStatsByWeek",
                oauth2_scopes=None,
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["400", "401", "403", "4XX", "500", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(
                Optional[models.WeeklyRushingStatsResponse], http_res
            )
        if utils.match_response(http_res, ["400", "401", "403", "4XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GriddyNFLError("API error occurred", http_res, http_res_text)
        if utils.match_response(http_res, ["500", "5XX"], "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.GriddyNFLError("API error occurred", http_res, http_res_text)

        raise errors.GriddyNFLError("Unexpected response received", http_res)
