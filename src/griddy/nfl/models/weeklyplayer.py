"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .nextgenstatspositionenum import NextGenStatsPositionEnum
from .nextgenstatspositiongroupenum import NextGenStatsPositionGroupEnum
from .seasontypeenum import SeasonTypeEnum
from datetime import date
from enum import Enum
from griddy.nfl.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class WeeklyPlayerNgsPosition(str, Enum):
    r"""Next Gen Stats player position"""

    C = "C"
    CB = "CB"
    DB = "DB"
    DE = "DE"
    DT = "DT"
    ED = "ED"
    FB = "FB"
    FS = "FS"
    G = "G"
    ILB = "ILB"
    K = "K"
    LB = "LB"
    LS = "LS"
    MLB = "MLB"
    NT = "NT"
    OL = "OL"
    OLB = "OLB"
    P = "P"
    QB = "QB"
    RB = "RB"
    S = "S"
    SCB = "SCB"
    SS = "SS"
    T = "T"
    TE = "TE"
    WR = "WR"


class WeeklyPlayerNgsPositionGroup(str, Enum):
    r"""Next Gen Stats position group"""

    DB = "DB"
    DL = "DL"
    K = "K"
    LB = "LB"
    OL = "OL"
    P = "P"
    QB = "QB"
    RB = "RB"
    TE = "TE"
    WR = "WR"


class WeeklyPlayerTypedDict(TypedDict):
    r"""Player information with weekly status"""

    birth_date: NotRequired[date]
    r"""Player's birth date"""
    college_conference: NotRequired[str]
    r"""Player's college conference"""
    college_name: NotRequired[str]
    r"""Player's college"""
    current_team_id: NotRequired[str]
    r"""Current team identifier"""
    display_name: NotRequired[str]
    r"""Player's display name"""
    draft_club: NotRequired[Nullable[str]]
    r"""Team that drafted the player"""
    draft_number: NotRequired[Nullable[int]]
    r"""Overall draft pick number"""
    draftround: NotRequired[Nullable[int]]
    r"""Draft round"""
    entry_year: NotRequired[int]
    r"""Year player entered the league"""
    esb_id: NotRequired[str]
    r"""ESB identifier"""
    first_name: NotRequired[str]
    r"""Player's first name"""
    football_name: NotRequired[str]
    r"""Player's football name (nickname)"""
    gsis_id: NotRequired[str]
    r"""GSIS identifier"""
    gsis_it_id: NotRequired[int]
    r"""GSIS IT identifier"""
    headshot: NotRequired[str]
    r"""URL to player headshot image"""
    height: NotRequired[str]
    r"""Player height (format is feet-inches)"""
    jersey_number: NotRequired[int]
    r"""Player's jersey number"""
    last_name: NotRequired[str]
    r"""Player's last name"""
    nfl_id: NotRequired[int]
    r"""NFL player identifier"""
    ngs_position: NotRequired[Nullable[WeeklyPlayerNgsPosition]]
    ngs_position_group: NotRequired[Nullable[WeeklyPlayerNgsPositionGroup]]
    position: NotRequired[NextGenStatsPositionEnum]
    r"""Next Gen Stats player position"""
    position_group: NotRequired[NextGenStatsPositionGroupEnum]
    r"""Next Gen Stats position group"""
    rookie_year: NotRequired[int]
    r"""Player's rookie year"""
    season: NotRequired[int]
    r"""Current season"""
    short_name: NotRequired[str]
    r"""Shortened player name"""
    smart_id: NotRequired[str]
    r"""Smart identifier for the player"""
    status: NotRequired[str]
    r"""Player status code"""
    status_description_abbr: NotRequired[str]
    r"""Abbreviated status description"""
    status_short_description: NotRequired[str]
    r"""Short status description"""
    team_abbr: NotRequired[str]
    r"""Current team abbreviation"""
    uniform_number: NotRequired[str]
    r"""Player's uniform number (formatted)"""
    weight: NotRequired[int]
    r"""Player weight in pounds"""
    years_of_experience: NotRequired[int]
    r"""Years of NFL experience"""
    season_type: NotRequired[SeasonTypeEnum]
    r"""Type of NFL season"""
    week: NotRequired[int]
    r"""Week number"""


class WeeklyPlayer(BaseModel):
    r"""Player information with weekly status"""

    birth_date: Annotated[Optional[date], pydantic.Field(alias="birthDate")] = None
    r"""Player's birth date"""

    college_conference: Annotated[
        Optional[str], pydantic.Field(alias="collegeConference")
    ] = None
    r"""Player's college conference"""

    college_name: Annotated[Optional[str], pydantic.Field(alias="collegeName")] = None
    r"""Player's college"""

    current_team_id: Annotated[Optional[str], pydantic.Field(alias="currentTeamId")] = (
        None
    )
    r"""Current team identifier"""

    display_name: Annotated[Optional[str], pydantic.Field(alias="displayName")] = None
    r"""Player's display name"""

    draft_club: Annotated[OptionalNullable[str], pydantic.Field(alias="draftClub")] = (
        UNSET
    )
    r"""Team that drafted the player"""

    draft_number: Annotated[
        OptionalNullable[int], pydantic.Field(alias="draftNumber")
    ] = UNSET
    r"""Overall draft pick number"""

    draftround: OptionalNullable[int] = UNSET
    r"""Draft round"""

    entry_year: Annotated[Optional[int], pydantic.Field(alias="entryYear")] = None
    r"""Year player entered the league"""

    esb_id: Annotated[Optional[str], pydantic.Field(alias="esbId")] = None
    r"""ESB identifier"""

    first_name: Annotated[Optional[str], pydantic.Field(alias="firstName")] = None
    r"""Player's first name"""

    football_name: Annotated[Optional[str], pydantic.Field(alias="footballName")] = None
    r"""Player's football name (nickname)"""

    gsis_id: Annotated[Optional[str], pydantic.Field(alias="gsisId")] = None
    r"""GSIS identifier"""

    gsis_it_id: Annotated[Optional[int], pydantic.Field(alias="gsisItId")] = None
    r"""GSIS IT identifier"""

    headshot: Optional[str] = None
    r"""URL to player headshot image"""

    height: Optional[str] = None
    r"""Player height (format is feet-inches)"""

    jersey_number: Annotated[Optional[int], pydantic.Field(alias="jerseyNumber")] = None
    r"""Player's jersey number"""

    last_name: Annotated[Optional[str], pydantic.Field(alias="lastName")] = None
    r"""Player's last name"""

    nfl_id: Annotated[Optional[int], pydantic.Field(alias="nflId")] = None
    r"""NFL player identifier"""

    ngs_position: Annotated[
        OptionalNullable[WeeklyPlayerNgsPosition], pydantic.Field(alias="ngsPosition")
    ] = UNSET

    ngs_position_group: Annotated[
        OptionalNullable[WeeklyPlayerNgsPositionGroup],
        pydantic.Field(alias="ngsPositionGroup"),
    ] = UNSET

    position: Optional[NextGenStatsPositionEnum] = None
    r"""Next Gen Stats player position"""

    position_group: Annotated[
        Optional[NextGenStatsPositionGroupEnum], pydantic.Field(alias="positionGroup")
    ] = None
    r"""Next Gen Stats position group"""

    rookie_year: Annotated[Optional[int], pydantic.Field(alias="rookieYear")] = None
    r"""Player's rookie year"""

    season: Optional[int] = None
    r"""Current season"""

    short_name: Annotated[Optional[str], pydantic.Field(alias="shortName")] = None
    r"""Shortened player name"""

    smart_id: Annotated[Optional[str], pydantic.Field(alias="smartId")] = None
    r"""Smart identifier for the player"""

    status: Optional[str] = None
    r"""Player status code"""

    status_description_abbr: Annotated[
        Optional[str], pydantic.Field(alias="statusDescriptionAbbr")
    ] = None
    r"""Abbreviated status description"""

    status_short_description: Annotated[
        Optional[str], pydantic.Field(alias="statusShortDescription")
    ] = None
    r"""Short status description"""

    team_abbr: Annotated[Optional[str], pydantic.Field(alias="teamAbbr")] = None
    r"""Current team abbreviation"""

    uniform_number: Annotated[Optional[str], pydantic.Field(alias="uniformNumber")] = (
        None
    )
    r"""Player's uniform number (formatted)"""

    weight: Optional[int] = None
    r"""Player weight in pounds"""

    years_of_experience: Annotated[
        Optional[int], pydantic.Field(alias="yearsOfExperience")
    ] = None
    r"""Years of NFL experience"""

    season_type: Annotated[
        Optional[SeasonTypeEnum], pydantic.Field(alias="seasonType")
    ] = None
    r"""Type of NFL season"""

    week: Optional[int] = None
    r"""Week number"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "birthDate",
            "collegeConference",
            "collegeName",
            "currentTeamId",
            "displayName",
            "draftClub",
            "draftNumber",
            "draftround",
            "entryYear",
            "esbId",
            "firstName",
            "footballName",
            "gsisId",
            "gsisItId",
            "headshot",
            "height",
            "jerseyNumber",
            "lastName",
            "nflId",
            "ngsPosition",
            "ngsPositionGroup",
            "position",
            "positionGroup",
            "rookieYear",
            "season",
            "shortName",
            "smartId",
            "status",
            "statusDescriptionAbbr",
            "statusShortDescription",
            "teamAbbr",
            "uniformNumber",
            "weight",
            "yearsOfExperience",
            "seasonType",
            "week",
        ]
        nullable_fields = [
            "draftClub",
            "draftNumber",
            "draftround",
            "ngsPosition",
            "ngsPositionGroup",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
