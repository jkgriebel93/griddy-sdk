"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from griddy.nfl.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class AuthorizationsTypedDict(TypedDict):
    r"""Authorization requirements for different NFL+ tiers"""


class Authorizations(BaseModel):
    r"""Authorization requirements for different NFL+ tiers"""


class ReplayBackgroundTypedDict(TypedDict):
    r"""Background metadata"""


class ReplayBackground(BaseModel):
    r"""Background metadata"""


class ReplayCtasTypedDict(TypedDict):
    pass


class ReplayCtas(BaseModel):
    pass


class IdsTypedDict(TypedDict):
    r"""Related entity identifiers"""

    away_team_id: NotRequired[str]
    game_id: NotRequired[str]
    home_team_id: NotRequired[str]
    play_id: NotRequired[Nullable[str]]


class Ids(BaseModel):
    r"""Related entity identifiers"""

    away_team_id: Annotated[Optional[str], pydantic.Field(alias="awayTeamId")] = None

    game_id: Annotated[Optional[str], pydantic.Field(alias="gameId")] = None

    home_team_id: Annotated[Optional[str], pydantic.Field(alias="homeTeamId")] = None

    play_id: Annotated[OptionalNullable[str], pydantic.Field(alias="playId")] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["awayTeamId", "gameId", "homeTeamId", "playId"]
        nullable_fields = ["playId"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class ReplayImagesTypedDict(TypedDict):
    pass


class ReplayImages(BaseModel):
    pass


class ReplayPromoAssetsTypedDict(TypedDict):
    pass


class ReplayPromoAssets(BaseModel):
    pass


class TagsTypedDict(TypedDict):
    game_id: NotRequired[str]
    season: NotRequired[str]
    season_type: NotRequired[str]
    week: NotRequired[str]


class Tags(BaseModel):
    game_id: Annotated[Optional[str], pydantic.Field(alias="gameId")] = None

    season: Optional[str] = None

    season_type: Annotated[Optional[str], pydantic.Field(alias="seasonType")] = None

    week: Optional[str] = None


class ThumbnailTypedDict(TypedDict):
    r"""Video thumbnail information"""

    thumbnail_url: NotRequired[str]
    r"""URL to video thumbnail image"""


class Thumbnail(BaseModel):
    r"""Video thumbnail information"""

    thumbnail_url: Annotated[Optional[str], pydantic.Field(alias="thumbnailUrl")] = None
    r"""URL to video thumbnail image"""


class ReplayVideosTypedDict(TypedDict):
    pass


class ReplayVideos(BaseModel):
    pass


class ReplayTypedDict(TypedDict):
    r"""Replay video information for a game"""

    advertiser_id: NotRequired[Nullable[str]]
    author: NotRequired[Nullable[str]]
    authorizations: NotRequired[AuthorizationsTypedDict]
    r"""Authorization requirements for different NFL+ tiers"""
    background: NotRequired[ReplayBackgroundTypedDict]
    r"""Background metadata"""
    camera_source: NotRequired[Nullable[str]]
    clip_type: NotRequired[Nullable[str]]
    ctas: NotRequired[List[ReplayCtasTypedDict]]
    r"""Call-to-action buttons"""
    cta_link: NotRequired[Nullable[str]]
    cta_target: NotRequired[Nullable[str]]
    cta_text: NotRequired[Nullable[str]]
    description: NotRequired[str]
    r"""Video description"""
    display_title: NotRequired[Nullable[str]]
    duration: NotRequired[str]
    r"""Video duration in seconds (as string)"""
    end_date: NotRequired[Nullable[str]]
    entitlement: NotRequired[Nullable[str]]
    episode_number: NotRequired[Nullable[int]]
    expiration_date: NotRequired[Nullable[str]]
    external_id: NotRequired[str]
    r"""External identifier for the video"""
    fantasy_link: NotRequired[Nullable[str]]
    host_network: NotRequired[Nullable[str]]
    id: NotRequired[Nullable[str]]
    ids: NotRequired[IdsTypedDict]
    r"""Related entity identifiers"""
    images: NotRequired[List[ReplayImagesTypedDict]]
    r"""Associated images"""
    intended_audience: NotRequired[Nullable[str]]
    intro_end: NotRequired[Nullable[str]]
    language: NotRequired[Nullable[str]]
    last_updated: NotRequired[Nullable[str]]
    mcp_playback_id: NotRequired[str]
    r"""Media Content Platform playback identifier"""
    mobile_link: NotRequired[Nullable[str]]
    mobile_title: NotRequired[Nullable[str]]
    original_air_date: NotRequired[Nullable[str]]
    outro_start: NotRequired[Nullable[str]]
    play_ids: NotRequired[List[str]]
    r"""Associated play identifiers"""
    pre_roll_disabled: NotRequired[bool]
    r"""Whether pre-roll ads are disabled"""
    promo_assets: NotRequired[List[ReplayPromoAssetsTypedDict]]
    r"""Promotional assets"""
    promo_link: NotRequired[Nullable[str]]
    promo_target: NotRequired[str]
    r"""Link target for promotional content"""
    promo_text: NotRequired[Nullable[str]]
    publish_date: NotRequired[datetime]
    r"""Video publish date"""
    radio_station: NotRequired[Nullable[str]]
    series: NotRequired[Nullable[str]]
    series_season: NotRequired[Nullable[str]]
    series_title: NotRequired[Nullable[str]]
    slug: NotRequired[Nullable[str]]
    start_date: NotRequired[Nullable[str]]
    sub_type: NotRequired[str]
    r"""Video subtype"""
    summary: NotRequired[Nullable[str]]
    tags: NotRequired[List[TagsTypedDict]]
    r"""Video tags for categorization"""
    thumbnail: NotRequired[ThumbnailTypedDict]
    r"""Video thumbnail information"""
    title: NotRequired[str]
    r"""Video title"""
    type: NotRequired[str]
    r"""Content type"""
    videos: NotRequired[List[ReplayVideosTypedDict]]
    r"""Associated video content"""
    web_link: NotRequired[Nullable[str]]


class Replay(BaseModel):
    r"""Replay video information for a game"""

    advertiser_id: Annotated[
        OptionalNullable[str], pydantic.Field(alias="advertiserId")
    ] = UNSET

    author: OptionalNullable[str] = UNSET

    authorizations: Optional[Authorizations] = None
    r"""Authorization requirements for different NFL+ tiers"""

    background: Optional[ReplayBackground] = None
    r"""Background metadata"""

    camera_source: Annotated[
        OptionalNullable[str], pydantic.Field(alias="cameraSource")
    ] = UNSET

    clip_type: Annotated[OptionalNullable[str], pydantic.Field(alias="clipType")] = (
        UNSET
    )

    ctas: Optional[List[ReplayCtas]] = None
    r"""Call-to-action buttons"""

    cta_link: Annotated[OptionalNullable[str], pydantic.Field(alias="ctaLink")] = UNSET

    cta_target: Annotated[OptionalNullable[str], pydantic.Field(alias="ctaTarget")] = (
        UNSET
    )

    cta_text: Annotated[OptionalNullable[str], pydantic.Field(alias="ctaText")] = UNSET

    description: Optional[str] = None
    r"""Video description"""

    display_title: Annotated[
        OptionalNullable[str], pydantic.Field(alias="displayTitle")
    ] = UNSET

    duration: Optional[str] = None
    r"""Video duration in seconds (as string)"""

    end_date: Annotated[OptionalNullable[str], pydantic.Field(alias="endDate")] = UNSET

    entitlement: OptionalNullable[str] = UNSET

    episode_number: Annotated[
        OptionalNullable[int], pydantic.Field(alias="episodeNumber")
    ] = UNSET

    expiration_date: Annotated[
        OptionalNullable[str], pydantic.Field(alias="expirationDate")
    ] = UNSET

    external_id: Annotated[Optional[str], pydantic.Field(alias="externalId")] = None
    r"""External identifier for the video"""

    fantasy_link: Annotated[
        OptionalNullable[str], pydantic.Field(alias="fantasyLink")
    ] = UNSET

    host_network: Annotated[
        OptionalNullable[str], pydantic.Field(alias="hostNetwork")
    ] = UNSET

    id: OptionalNullable[str] = UNSET

    ids: Optional[Ids] = None
    r"""Related entity identifiers"""

    images: Optional[List[ReplayImages]] = None
    r"""Associated images"""

    intended_audience: Annotated[
        OptionalNullable[str], pydantic.Field(alias="intendedAudience")
    ] = UNSET

    intro_end: Annotated[OptionalNullable[str], pydantic.Field(alias="introEnd")] = (
        UNSET
    )

    language: OptionalNullable[str] = UNSET

    last_updated: Annotated[
        OptionalNullable[str], pydantic.Field(alias="lastUpdated")
    ] = UNSET

    mcp_playback_id: Annotated[Optional[str], pydantic.Field(alias="mcpPlaybackId")] = (
        None
    )
    r"""Media Content Platform playback identifier"""

    mobile_link: Annotated[
        OptionalNullable[str], pydantic.Field(alias="mobileLink")
    ] = UNSET

    mobile_title: Annotated[
        OptionalNullable[str], pydantic.Field(alias="mobileTitle")
    ] = UNSET

    original_air_date: Annotated[
        OptionalNullable[str], pydantic.Field(alias="originalAirDate")
    ] = UNSET

    outro_start: Annotated[
        OptionalNullable[str], pydantic.Field(alias="outroStart")
    ] = UNSET

    play_ids: Annotated[Optional[List[str]], pydantic.Field(alias="playIds")] = None
    r"""Associated play identifiers"""

    pre_roll_disabled: Annotated[
        Optional[bool], pydantic.Field(alias="preRollDisabled")
    ] = None
    r"""Whether pre-roll ads are disabled"""

    promo_assets: Annotated[
        Optional[List[ReplayPromoAssets]], pydantic.Field(alias="promoAssets")
    ] = None
    r"""Promotional assets"""

    promo_link: Annotated[OptionalNullable[str], pydantic.Field(alias="promoLink")] = (
        UNSET
    )

    promo_target: Annotated[Optional[str], pydantic.Field(alias="promoTarget")] = None
    r"""Link target for promotional content"""

    promo_text: Annotated[OptionalNullable[str], pydantic.Field(alias="promoText")] = (
        UNSET
    )

    publish_date: Annotated[Optional[datetime], pydantic.Field(alias="publishDate")] = (
        None
    )
    r"""Video publish date"""

    radio_station: Annotated[
        OptionalNullable[str], pydantic.Field(alias="radioStation")
    ] = UNSET

    series: OptionalNullable[str] = UNSET

    series_season: Annotated[
        OptionalNullable[str], pydantic.Field(alias="seriesSeason")
    ] = UNSET

    series_title: Annotated[
        OptionalNullable[str], pydantic.Field(alias="seriesTitle")
    ] = UNSET

    slug: OptionalNullable[str] = UNSET

    start_date: Annotated[OptionalNullable[str], pydantic.Field(alias="startDate")] = (
        UNSET
    )

    sub_type: Annotated[Optional[str], pydantic.Field(alias="subType")] = None
    r"""Video subtype"""

    summary: OptionalNullable[str] = UNSET

    tags: Optional[List[Tags]] = None
    r"""Video tags for categorization"""

    thumbnail: Optional[Thumbnail] = None
    r"""Video thumbnail information"""

    title: Optional[str] = None
    r"""Video title"""

    type: Optional[str] = None
    r"""Content type"""

    videos: Optional[List[ReplayVideos]] = None
    r"""Associated video content"""

    web_link: Annotated[OptionalNullable[str], pydantic.Field(alias="webLink")] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "advertiserId",
            "author",
            "authorizations",
            "background",
            "cameraSource",
            "clipType",
            "ctas",
            "ctaLink",
            "ctaTarget",
            "ctaText",
            "description",
            "displayTitle",
            "duration",
            "endDate",
            "entitlement",
            "episodeNumber",
            "expirationDate",
            "externalId",
            "fantasyLink",
            "hostNetwork",
            "id",
            "ids",
            "images",
            "intendedAudience",
            "introEnd",
            "language",
            "lastUpdated",
            "mcpPlaybackId",
            "mobileLink",
            "mobileTitle",
            "originalAirDate",
            "outroStart",
            "playIds",
            "preRollDisabled",
            "promoAssets",
            "promoLink",
            "promoTarget",
            "promoText",
            "publishDate",
            "radioStation",
            "series",
            "seriesSeason",
            "seriesTitle",
            "slug",
            "startDate",
            "subType",
            "summary",
            "tags",
            "thumbnail",
            "title",
            "type",
            "videos",
            "webLink",
        ]
        nullable_fields = [
            "advertiserId",
            "author",
            "cameraSource",
            "clipType",
            "ctaLink",
            "ctaTarget",
            "ctaText",
            "displayTitle",
            "endDate",
            "entitlement",
            "episodeNumber",
            "expirationDate",
            "fantasyLink",
            "hostNetwork",
            "id",
            "intendedAudience",
            "introEnd",
            "language",
            "lastUpdated",
            "mobileLink",
            "mobileTitle",
            "originalAirDate",
            "outroStart",
            "promoLink",
            "promoText",
            "radioStation",
            "series",
            "seriesSeason",
            "seriesTitle",
            "slug",
            "startDate",
            "summary",
            "webLink",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
