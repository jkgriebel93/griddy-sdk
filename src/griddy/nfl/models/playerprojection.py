"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from griddy.nfl.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class PlayerProjectionSchemasType(str, Enum):
    PLAYER_WEEK_PROJECTED_POINTS = "player-week-projected-points"


class WeekPointsTypedDict(TypedDict):
    id: NotRequired[str]
    r"""Reference to projected points"""
    type: NotRequired[PlayerProjectionSchemasType]


class WeekPoints(BaseModel):
    id: Optional[str] = None
    r"""Reference to projected points"""

    type: Optional[PlayerProjectionSchemasType] = None


class PlayerProjectionType(str, Enum):
    PLAYER_WEEK_PROJECTED_STATS = "player-week-projected-stats"


class WeekStatsTypedDict(TypedDict):
    id: NotRequired[str]
    r"""Reference to projected stats"""
    type: NotRequired[PlayerProjectionType]


class WeekStats(BaseModel):
    id: Optional[str] = None
    r"""Reference to projected stats"""

    type: Optional[PlayerProjectionType] = None


class RelationshipsTypedDict(TypedDict):
    week_points: NotRequired[List[WeekPointsTypedDict]]
    week_stats: NotRequired[List[WeekStatsTypedDict]]


class Relationships(BaseModel):
    week_points: Annotated[
        Optional[List[WeekPoints]], pydantic.Field(alias="weekPoints")
    ] = None

    week_stats: Annotated[
        Optional[List[WeekStats]], pydantic.Field(alias="weekStats")
    ] = None


class Type(str, Enum):
    r"""Resource type"""

    PLAYER = "player"


class PlayerProjectionTypedDict(TypedDict):
    id: NotRequired[str]
    r"""Player SMART ID"""
    relationships: NotRequired[RelationshipsTypedDict]
    type: NotRequired[Type]
    r"""Resource type"""


class PlayerProjection(BaseModel):
    id: Optional[str] = None
    r"""Player SMART ID"""

    relationships: Optional[Relationships] = None

    type: Optional[Type] = None
    r"""Resource type"""
