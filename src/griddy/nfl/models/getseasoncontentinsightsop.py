"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from griddy.nfl.types import BaseModel
from griddy.nfl.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


GET_SEASON_CONTENT_INSIGHTS_OP_SERVERS = [
    # Production NFL Pro API
    "https://pro.nfl.com",
]


class QueryParamTags(str, Enum):
    NFL_PRO = "nfl-pro"
    EDITORIAL = "editorial"
    NEXT_GEN_STATS = "next-gen-stats"
    PREGAME = "pregame"
    POSTGAME = "postgame"
    FANTASY = "fantasy"
    PRO_PREVIEW = "pro-preview"
    PRO_MATCHUP = "pro-matchup"
    EVERGREEN = "evergreen"


class GetSeasonContentInsightsRequestTypedDict(TypedDict):
    season: int
    r"""Season year"""
    limit: NotRequired[int]
    r"""Maximum number of insights to return"""
    tags: NotRequired[List[QueryParamTags]]
    r"""Content tags to filter by (supports multiple comma-separated tags)"""
    team_id: NotRequired[str]
    r"""Filter by specific team identifier"""
    nfl_id: NotRequired[str]
    r"""Filter by specific player NFL identifier"""


class GetSeasonContentInsightsRequest(BaseModel):
    season: Annotated[
        int, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ]
    r"""Season year"""

    limit: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 20
    r"""Maximum number of insights to return"""

    tags: Annotated[
        Optional[List[QueryParamTags]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Content tags to filter by (supports multiple comma-separated tags)"""

    team_id: Annotated[
        Optional[str],
        pydantic.Field(alias="teamId"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter by specific team identifier"""

    nfl_id: Annotated[
        Optional[str],
        pydantic.Field(alias="nflId"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter by specific player NFL identifier"""
