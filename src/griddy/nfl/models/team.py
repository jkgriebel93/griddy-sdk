"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .conferenceenum import ConferenceEnum
from .socialmedia import SocialMedia, SocialMediaTypedDict
from .teamtypeenum import TeamTypeEnum
from .venue import Venue, VenueTypedDict
from griddy.nfl.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class TeamTypedDict(TypedDict):
    abbreviation: NotRequired[str]
    r"""Three-letter team abbreviation"""
    conference_abbr: NotRequired[ConferenceEnum]
    r"""NFL conference"""
    conference_full_name: NotRequired[str]
    r"""Full conference name"""
    current_logo: NotRequired[str]
    r"""URL to team logo (may contain {formatInstructions} placeholder)"""
    division_full_name: NotRequired[str]
    r"""Full division name"""
    full_name: NotRequired[str]
    r"""Full team name"""
    id: NotRequired[str]
    r"""Unique team identifier"""
    league: NotRequired[str]
    r"""League name"""
    location: NotRequired[str]
    r"""Team location/city"""
    nfl_shop_url: NotRequired[Nullable[str]]
    r"""URL to team's NFL shop"""
    nick_name: NotRequired[str]
    r"""Team nickname"""
    official_website_url: NotRequired[Nullable[str]]
    r"""Team's official website"""
    owners: NotRequired[Nullable[str]]
    r"""Team ownership information"""
    primary_color: NotRequired[str]
    r"""Primary team color (hex)"""
    season: NotRequired[str]
    r"""Current season"""
    secondary_color: NotRequired[str]
    r"""Secondary team color (hex)"""
    socials: NotRequired[List[SocialMediaTypedDict]]
    team_type: NotRequired[TeamTypeEnum]
    r"""Team type classification"""
    venues: NotRequired[List[VenueTypedDict]]
    year_established: NotRequired[int]
    r"""Year team was established"""


class Team(BaseModel):
    abbreviation: Optional[str] = None
    r"""Three-letter team abbreviation"""

    conference_abbr: Annotated[
        Optional[ConferenceEnum], pydantic.Field(alias="conferenceAbbr")
    ] = None
    r"""NFL conference"""

    conference_full_name: Annotated[
        Optional[str], pydantic.Field(alias="conferenceFullName")
    ] = None
    r"""Full conference name"""

    current_logo: Annotated[Optional[str], pydantic.Field(alias="currentLogo")] = None
    r"""URL to team logo (may contain {formatInstructions} placeholder)"""

    division_full_name: Annotated[
        Optional[str], pydantic.Field(alias="divisionFullName")
    ] = None
    r"""Full division name"""

    full_name: Annotated[Optional[str], pydantic.Field(alias="fullName")] = None
    r"""Full team name"""

    id: Optional[str] = None
    r"""Unique team identifier"""

    league: Optional[str] = None
    r"""League name"""

    location: Optional[str] = None
    r"""Team location/city"""

    nfl_shop_url: Annotated[
        OptionalNullable[str], pydantic.Field(alias="nflShopUrl")
    ] = UNSET
    r"""URL to team's NFL shop"""

    nick_name: Annotated[Optional[str], pydantic.Field(alias="nickName")] = None
    r"""Team nickname"""

    official_website_url: Annotated[
        OptionalNullable[str], pydantic.Field(alias="officialWebsiteUrl")
    ] = UNSET
    r"""Team's official website"""

    owners: OptionalNullable[str] = UNSET
    r"""Team ownership information"""

    primary_color: Annotated[Optional[str], pydantic.Field(alias="primaryColor")] = None
    r"""Primary team color (hex)"""

    season: Optional[str] = None
    r"""Current season"""

    secondary_color: Annotated[
        Optional[str], pydantic.Field(alias="secondaryColor")
    ] = None
    r"""Secondary team color (hex)"""

    socials: Optional[List[SocialMedia]] = None

    team_type: Annotated[Optional[TeamTypeEnum], pydantic.Field(alias="teamType")] = (
        None
    )
    r"""Team type classification"""

    venues: Optional[List[Venue]] = None

    year_established: Annotated[
        Optional[int], pydantic.Field(alias="yearEstablished")
    ] = None
    r"""Year team was established"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "abbreviation",
            "conferenceAbbr",
            "conferenceFullName",
            "currentLogo",
            "divisionFullName",
            "fullName",
            "id",
            "league",
            "location",
            "nflShopUrl",
            "nickName",
            "officialWebsiteUrl",
            "owners",
            "primaryColor",
            "season",
            "secondaryColor",
            "socials",
            "teamType",
            "venues",
            "yearEstablished",
        ]
        nullable_fields = ["nflShopUrl", "officialWebsiteUrl", "owners"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
