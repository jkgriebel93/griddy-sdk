"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .seasontypeenum import SeasonTypeEnum
from datetime import date, datetime
from griddy_nfl.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing import List, Literal, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


InsightPosition = Literal[
    "QB",
    "RB",
    "WR",
    "TE",
    "OL",
    "DL",
    "LB",
    "DB",
    "K",
    "P",
]
r"""Player position"""


SecondTeamType = Literal[
    "offense",
    "defense",
]
r"""Context of the second team (typically \"defense\" for opponent)"""


class InsightTypedDict(TypedDict):
    created_at: datetime
    r"""Content creation timestamp"""
    created_by: str
    r"""Content creator identifier"""
    date_: date
    r"""Content publication date"""
    id: str
    r"""Unique content identifier"""
    nfl_id: int
    r"""NFL player identifier"""
    player_name: str
    r"""Player's full name"""
    position: InsightPosition
    r"""Player position"""
    season: int
    r"""Season year"""
    season_type: SeasonTypeEnum
    r"""Type of NFL season"""
    tags: List[str]
    r"""Content classification tags"""
    team_abbr: str
    r"""Player's team abbreviation"""
    team_id: str
    r"""Player's team identifier"""
    title: str
    r"""Main insight headline or title"""
    updated_at: datetime
    r"""Last update timestamp"""
    updated_by: str
    r"""Last editor identifier"""
    week: int
    r"""Week number (if applicable)"""
    esb_id: NotRequired[str]
    r"""ESB player identifier"""
    evergreen: NotRequired[bool]
    r"""Whether content is evergreen (timeless) or time-sensitive"""
    game_id: NotRequired[Nullable[int]]
    r"""Game identifier (10-digit format YYYYMMDDNN)"""
    gsis_id: NotRequired[str]
    r"""GSIS player identifier"""
    headshot: NotRequired[str]
    r"""URL to player headshot image (contains formatInstructions placeholder)"""
    image_url: NotRequired[Nullable[str]]
    r"""Associated image or chart URL (optional)"""
    jersey_number: NotRequired[int]
    r"""Player's jersey number"""
    second_team_abbr: NotRequired[Nullable[str]]
    r"""Opponent or related team abbreviation"""
    second_team_id: NotRequired[Nullable[str]]
    r"""Opponent or related team identifier"""
    second_team_type: NotRequired[Nullable[SecondTeamType]]
    r"""Context of the second team (typically \"defense\" for opponent)"""
    smart_id: NotRequired[str]
    r"""Smart player identifier"""
    sub_note1: NotRequired[str]
    r"""Detailed insight content and analysis"""


class Insight(BaseModel):
    created_at: Annotated[datetime, pydantic.Field(alias="createdAt")]
    r"""Content creation timestamp"""

    created_by: Annotated[str, pydantic.Field(alias="createdBy")]
    r"""Content creator identifier"""

    date_: Annotated[date, pydantic.Field(alias="date")]
    r"""Content publication date"""

    id: str
    r"""Unique content identifier"""

    nfl_id: Annotated[int, pydantic.Field(alias="nflId")]
    r"""NFL player identifier"""

    player_name: Annotated[str, pydantic.Field(alias="playerName")]
    r"""Player's full name"""

    position: InsightPosition
    r"""Player position"""

    season: int
    r"""Season year"""

    season_type: Annotated[SeasonTypeEnum, pydantic.Field(alias="seasonType")]
    r"""Type of NFL season"""

    tags: List[str]
    r"""Content classification tags"""

    team_abbr: Annotated[str, pydantic.Field(alias="teamAbbr")]
    r"""Player's team abbreviation"""

    team_id: Annotated[str, pydantic.Field(alias="teamId")]
    r"""Player's team identifier"""

    title: str
    r"""Main insight headline or title"""

    updated_at: Annotated[datetime, pydantic.Field(alias="updatedAt")]
    r"""Last update timestamp"""

    updated_by: Annotated[str, pydantic.Field(alias="updatedBy")]
    r"""Last editor identifier"""

    week: int
    r"""Week number (if applicable)"""

    esb_id: Annotated[Optional[str], pydantic.Field(alias="esbId")] = None
    r"""ESB player identifier"""

    evergreen: Optional[bool] = False
    r"""Whether content is evergreen (timeless) or time-sensitive"""

    game_id: Annotated[OptionalNullable[int], pydantic.Field(alias="gameId")] = UNSET
    r"""Game identifier (10-digit format YYYYMMDDNN)"""

    gsis_id: Annotated[Optional[str], pydantic.Field(alias="gsisId")] = None
    r"""GSIS player identifier"""

    headshot: Optional[str] = None
    r"""URL to player headshot image (contains formatInstructions placeholder)"""

    image_url: Annotated[OptionalNullable[str], pydantic.Field(alias="imageUrl")] = (
        UNSET
    )
    r"""Associated image or chart URL (optional)"""

    jersey_number: Annotated[Optional[int], pydantic.Field(alias="jerseyNumber")] = None
    r"""Player's jersey number"""

    second_team_abbr: Annotated[
        OptionalNullable[str], pydantic.Field(alias="secondTeamAbbr")
    ] = UNSET
    r"""Opponent or related team abbreviation"""

    second_team_id: Annotated[
        OptionalNullable[str], pydantic.Field(alias="secondTeamId")
    ] = UNSET
    r"""Opponent or related team identifier"""

    second_team_type: Annotated[
        OptionalNullable[SecondTeamType], pydantic.Field(alias="secondTeamType")
    ] = UNSET
    r"""Context of the second team (typically \"defense\" for opponent)"""

    smart_id: Annotated[Optional[str], pydantic.Field(alias="smartId")] = None
    r"""Smart player identifier"""

    sub_note1: Annotated[Optional[str], pydantic.Field(alias="subNote1")] = None
    r"""Detailed insight content and analysis"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "esbId",
            "evergreen",
            "gameId",
            "gsisId",
            "headshot",
            "imageUrl",
            "jerseyNumber",
            "secondTeamAbbr",
            "secondTeamId",
            "secondTeamType",
            "smartId",
            "subNote1",
        ]
        nullable_fields = [
            "gameId",
            "imageUrl",
            "secondTeamAbbr",
            "secondTeamId",
            "secondTeamType",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
