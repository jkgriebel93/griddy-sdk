"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .conference import Conference, ConferenceTypedDict
from .conferenceenum import ConferenceEnum
from .division import Division, DivisionTypedDict
from .teamtypeenum import TeamTypeEnum
from griddy_nfl.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class TeamInfoTypedDict(TypedDict):
    r"""Basic team information included in roster responses"""

    abbr: NotRequired[str]
    city_state: NotRequired[str]
    conference: NotRequired[ConferenceTypedDict]
    conference_abbr: NotRequired[ConferenceEnum]
    r"""NFL conference"""
    division: NotRequired[DivisionTypedDict]
    full_name: NotRequired[str]
    logo: NotRequired[str]
    nick: NotRequired[str]
    season: NotRequired[int]
    smart_id: NotRequired[str]
    stadium_name: NotRequired[str]
    team_id: NotRequired[str]
    team_site_ticket_url: NotRequired[Nullable[str]]
    team_site_url: NotRequired[Nullable[str]]
    team_type: NotRequired[TeamTypeEnum]
    r"""Team type classification"""
    ticket_phone_number: NotRequired[Nullable[str]]
    year_found: NotRequired[int]


class TeamInfo(BaseModel):
    r"""Basic team information included in roster responses"""

    abbr: Optional[str] = None

    city_state: Annotated[Optional[str], pydantic.Field(alias="cityState")] = None

    conference: Optional[Conference] = None

    conference_abbr: Annotated[
        Optional[ConferenceEnum], pydantic.Field(alias="conferenceAbbr")
    ] = None
    r"""NFL conference"""

    division: Optional[Division] = None

    full_name: Annotated[Optional[str], pydantic.Field(alias="fullName")] = None

    logo: Optional[str] = None

    nick: Optional[str] = None

    season: Optional[int] = None

    smart_id: Annotated[Optional[str], pydantic.Field(alias="smartId")] = None

    stadium_name: Annotated[Optional[str], pydantic.Field(alias="stadiumName")] = None

    team_id: Annotated[Optional[str], pydantic.Field(alias="teamId")] = None

    team_site_ticket_url: Annotated[
        OptionalNullable[str], pydantic.Field(alias="teamSiteTicketUrl")
    ] = UNSET

    team_site_url: Annotated[
        OptionalNullable[str], pydantic.Field(alias="teamSiteUrl")
    ] = UNSET

    team_type: Annotated[Optional[TeamTypeEnum], pydantic.Field(alias="teamType")] = (
        None
    )
    r"""Team type classification"""

    ticket_phone_number: Annotated[
        OptionalNullable[str], pydantic.Field(alias="ticketPhoneNumber")
    ] = UNSET

    year_found: Annotated[Optional[int], pydantic.Field(alias="yearFound")] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "abbr",
            "cityState",
            "conference",
            "conferenceAbbr",
            "division",
            "fullName",
            "logo",
            "nick",
            "season",
            "smartId",
            "stadiumName",
            "teamId",
            "teamSiteTicketUrl",
            "teamSiteUrl",
            "teamType",
            "ticketPhoneNumber",
            "yearFound",
        ]
        nullable_fields = ["teamSiteTicketUrl", "teamSiteUrl", "ticketPhoneNumber"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
