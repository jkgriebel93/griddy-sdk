"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .seasontypeenum import SeasonTypeEnum
from .sortorderenum import SortOrderEnum
from enum import Enum
from griddy.nfl.types import BaseModel
from griddy.nfl.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


GET_FANTASY_STATS_BY_SEASON_OP_SERVERS = [
    # Production NFL Pro API
    "https://pro.nfl.com",
]


class GetFantasyStatsBySeasonQueryParamSortKey(str, Enum):
    r"""Field to sort by"""

    FP_STD = "fpStd"
    FP_PPR = "fpPpr"
    FP_HALF_PPR = "fpHalfPpr"
    PASS_YDS = "passYds"
    PASS_TD = "passTd"
    PASS_INT = "passInt"
    RUSH_YDS = "rushYds"
    RUSH_TD = "rushTd"
    REC_YDS = "recYds"
    REC_TD = "recTd"
    REC = "rec"
    TGT = "tgt"
    SNAP_PCT = "snapPct"
    TARGET_SHARE = "targetShare"
    RED_ZONE_TARGETS = "redZoneTargets"


class PositionGroup(str, Enum):
    QB = "QB"
    RB = "RB"
    WR = "WR"
    TE = "TE"
    SPEC = "SPEC"


class GetFantasyStatsBySeasonRequestTypedDict(TypedDict):
    season: int
    r"""Season year"""
    season_type: SeasonTypeEnum
    r"""Type of season"""
    limit: NotRequired[int]
    r"""Maximum number of players to return"""
    offset: NotRequired[int]
    r"""Number of records to skip for pagination"""
    page: NotRequired[int]
    r"""Page number for pagination"""
    sort_key: NotRequired[GetFantasyStatsBySeasonQueryParamSortKey]
    r"""Field to sort by"""
    sort_value: NotRequired[SortOrderEnum]
    r"""Sort direction"""
    position_group: NotRequired[List[PositionGroup]]
    r"""Filter by position groups (supports multiple positions)"""
    team_offense: NotRequired[str]
    r"""Filter by specific offensive team ID"""
    team_defense: NotRequired[str]
    r"""Filter by specific defensive team ID (opponent analysis)"""
    min_offensive_snaps: NotRequired[int]
    r"""Minimum offensive snaps threshold for inclusion"""
    last_n_weeks: NotRequired[int]
    r"""Number of recent weeks to analyze (rolling window)"""


class GetFantasyStatsBySeasonRequest(BaseModel):
    season: Annotated[
        int, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ]
    r"""Season year"""

    season_type: Annotated[
        SeasonTypeEnum,
        pydantic.Field(alias="seasonType"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""Type of season"""

    limit: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 35
    r"""Maximum number of players to return"""

    offset: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 0
    r"""Number of records to skip for pagination"""

    page: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 1
    r"""Page number for pagination"""

    sort_key: Annotated[
        Optional[GetFantasyStatsBySeasonQueryParamSortKey],
        pydantic.Field(alias="sortKey"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = GetFantasyStatsBySeasonQueryParamSortKey.FP_STD
    r"""Field to sort by"""

    sort_value: Annotated[
        Optional[SortOrderEnum],
        pydantic.Field(alias="sortValue"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Sort direction"""

    position_group: Annotated[
        Optional[List[PositionGroup]],
        pydantic.Field(alias="positionGroup"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter by position groups (supports multiple positions)"""

    team_offense: Annotated[
        Optional[str],
        pydantic.Field(alias="teamOffense"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter by specific offensive team ID"""

    team_defense: Annotated[
        Optional[str],
        pydantic.Field(alias="teamDefense"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Filter by specific defensive team ID (opponent analysis)"""

    min_offensive_snaps: Annotated[
        Optional[int],
        pydantic.Field(alias="minOffensiveSnaps"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 0
    r"""Minimum offensive snaps threshold for inclusion"""

    last_n_weeks: Annotated[
        Optional[int],
        pydantic.Field(alias="lastNWeeks"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Number of recent weeks to analyze (rolling window)"""
