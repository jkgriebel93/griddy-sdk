"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .seasontypeenum import SeasonTypeEnum
from .sortorderenum import SortOrderEnum
from .teamoffenseoverviewstats import (
    TeamOffenseOverviewStats,
    TeamOffenseOverviewStatsTypedDict,
)
from griddy.nfl.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class TeamOffenseOverviewStatsResponseTypedDict(TypedDict):
    r"""Common pagination and query metadata for stats responses"""

    limit: NotRequired[int]
    r"""Maximum number of results returned"""
    offset: NotRequired[int]
    r"""Number of records skipped"""
    season: NotRequired[int]
    r"""Season year"""
    season_type: NotRequired[SeasonTypeEnum]
    r"""Type of NFL season"""
    sort_key: NotRequired[str]
    r"""Field used for sorting"""
    sort_value: NotRequired[SortOrderEnum]
    r"""Sort direction for ordered results"""
    total: NotRequired[int]
    r"""Total number of items matching the criteria"""
    offense: NotRequired[List[TeamOffenseOverviewStatsTypedDict]]
    split: NotRequired[List[str]]
    r"""Applied offensive situation splits"""
    team_defense: NotRequired[str]
    r"""Team filter applied (if any)"""


class TeamOffenseOverviewStatsResponse(BaseModel):
    r"""Common pagination and query metadata for stats responses"""

    limit: Optional[int] = None
    r"""Maximum number of results returned"""

    offset: Optional[int] = None
    r"""Number of records skipped"""

    season: Optional[int] = None
    r"""Season year"""

    season_type: Annotated[
        Optional[SeasonTypeEnum], pydantic.Field(alias="seasonType")
    ] = None
    r"""Type of NFL season"""

    sort_key: Annotated[Optional[str], pydantic.Field(alias="sortKey")] = None
    r"""Field used for sorting"""

    sort_value: Annotated[
        Optional[SortOrderEnum], pydantic.Field(alias="sortValue")
    ] = None
    r"""Sort direction for ordered results"""

    total: Optional[int] = None
    r"""Total number of items matching the criteria"""

    offense: Optional[List[TeamOffenseOverviewStats]] = None

    split: Optional[List[str]] = None
    r"""Applied offensive situation splits"""

    team_defense: Annotated[Optional[str], pydantic.Field(alias="teamDefense")] = None
    r"""Team filter applied (if any)"""
