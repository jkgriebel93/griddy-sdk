"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from griddy.nfl.types import BaseModel
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class TokenResponseTypedDict(TypedDict):
    access_token: NotRequired[str]
    r"""JWT access token containing user permissions, subscription plans, location data, and roles. Include this token in the Authorization header as \"Bearer {accessToken}\" for authenticated requests."""
    expires_in: NotRequired[int]
    r"""Unix timestamp when the access token expires"""
    refresh_token: NotRequired[str]
    r"""New refresh token for future token refresh requests"""


class TokenResponse(BaseModel):
    access_token: Annotated[Optional[str], pydantic.Field(alias="accessToken")] = None
    r"""JWT access token containing user permissions, subscription plans, location data, and roles. Include this token in the Authorization header as \"Bearer {accessToken}\" for authenticated requests."""

    expires_in: Annotated[Optional[int], pydantic.Field(alias="expiresIn")] = None
    r"""Unix timestamp when the access token expires"""

    refresh_token: Annotated[Optional[str], pydantic.Field(alias="refreshToken")] = None
    r"""New refresh token for future token refresh requests"""
