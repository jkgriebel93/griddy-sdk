"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from .httpclient import AsyncHttpClient, ClientOwner, HttpClient, close_clients
from .sdkconfiguration import SDKConfiguration
from .utils.logger import Logger, get_default_logger
from .utils.retries import RetryConfig
import httpx
import importlib
from openapi import models
from openapi._hooks import SDKHooks
from openapi.types import OptionalNullable, UNSET
import sys
from typing import Any, Callable, Optional, TYPE_CHECKING, Union, cast
import weakref

if TYPE_CHECKING:
    from openapi.authentication import Authentication
    from openapi.betting import Betting
    from openapi.content import Content
    from openapi.content_insights import ContentInsights
    from openapi.defensive_pass_rush_statistics import DefensivePassRushStatistics
    from openapi.defensive_player_overview import DefensivePlayerOverview
    from openapi.defensive_statistics import DefensiveStatistics
    from openapi.experience import Experience
    from openapi.fantasy_statistics import FantasyStatistics
    from openapi.filmroom import Filmroom
    from openapi.football import Football
    from openapi.player_passing_statistics import PlayerPassingStatistics
    from openapi.player_receiving_statistics import PlayerReceivingStatistics
    from openapi.player_rushing_statistics import PlayerRushingStatistics
    from openapi.player_statistics import PlayerStatistics
    from openapi.players import Players
    from openapi.plays import Plays
    from openapi.schedules import Schedules
    from openapi.schedules_extended import SchedulesExtended
    from openapi.scores import Scores
    from openapi.season_schedule import SeasonSchedule
    from openapi.secured_videos import SecuredVideos
    from openapi.stats_sdk import StatsSDK
    from openapi.team_defense_pass_statistics import TeamDefensePassStatistics
    from openapi.team_defense_rush_statistics import TeamDefenseRushStatistics
    from openapi.team_defense_statistics import TeamDefenseStatistics
    from openapi.team_offense_overview_statistics import TeamOffenseOverviewStatistics
    from openapi.team_offense_pass_statistics import TeamOffensePassStatistics
    from openapi.teams import Teams
    from openapi.win_probability import WinProbability


class SDK(BaseSDK):
    r"""NFL REST APIs: Regular API - NFL's public API for accessing game schedules, team information, standings, statistics, and venue data. This API provides comprehensive access to NFL data including real-time game information, team rosters, seasonal statistics, and historical data. The NFL Pro API is for accessing advanced statistics, film room content, player data, and fantasy information. This API provides comprehensive access to NFL Pro features including Next Gen Stats, Film Room analysis, player projections, and game insights."""

    content: "Content"
    r"""Game previews, film cards, and insights"""
    content_insights: "ContentInsights"
    r"""Editorial insights and analytics content about NFL players and games"""
    players: "Players"
    r"""Player information, statistics, and projections"""
    plays: "Plays"
    r"""Play-by-play data and film room analysis"""
    schedules_extended: "SchedulesExtended"
    r"""Current games, standings, and betting futures"""
    schedules: "Schedules"
    r"""Game schedules, matchup rankings, and injury reports"""
    betting: "Betting"
    r"""Game betting odds and lines"""
    season_schedule: "SeasonSchedule"
    r"""Season weeks and bye information"""
    scores: "Scores"
    r"""Real-time scoring and game status endpoints"""
    win_probability: "WinProbability"
    r"""Game and play-level win probability analytics"""
    defensive_statistics: "DefensiveStatistics"
    r"""Individual defensive player statistics and coverage analytics"""
    defensive_player_overview: "DefensivePlayerOverview"
    r"""Comprehensive individual defensive player statistics and analytics"""
    defensive_pass_rush_statistics: "DefensivePassRushStatistics"
    r"""Individual defensive player pass rush statistics and analytics"""
    fantasy_statistics: "FantasyStatistics"
    r"""Fantasy football player statistics and scoring metrics"""
    player_statistics: "PlayerStatistics"
    r"""Individual player passing statistics and analytics"""
    player_passing_statistics: "PlayerPassingStatistics"
    r"""Individual player passing statistics and analytics by week"""
    player_receiving_statistics: "PlayerReceivingStatistics"
    r"""Individual player receiving statistics and analytics"""
    player_rushing_statistics: "PlayerRushingStatistics"
    r"""Individual player rushing statistics and analytics"""
    team_defense_statistics: "TeamDefenseStatistics"
    r"""Comprehensive team defensive statistics and situational analytics"""
    team_defense_pass_statistics: "TeamDefensePassStatistics"
    r"""Comprehensive team defensive pass statistics and situational analytics"""
    team_defense_rush_statistics: "TeamDefenseRushStatistics"
    r"""Comprehensive team defensive rush statistics and situational analytics"""
    team_offense_overview_statistics: "TeamOffenseOverviewStatistics"
    r"""Comprehensive team offensive overview statistics and situational analytics"""
    team_offense_pass_statistics: "TeamOffensePassStatistics"
    r"""Comprehensive team offensive pass statistics and situational analytics"""
    secured_videos: "SecuredVideos"
    r"""Premium coaches film video content with multiple camera angles"""
    filmroom: "Filmroom"
    r"""Advanced play analysis and film study data"""
    stats: "StatsSDK"
    r"""Comprehensive game and team statistics endpoints"""
    teams: "Teams"
    r"""Team information, rosters, and schedules"""
    experience: "Experience"
    r"""Experience API endpoints for games and teams"""
    football: "Football"
    r"""Football API endpoints for games, standings, stats, and venues"""
    authentication: "Authentication"
    r"""Token generation and refresh operations for NFL API access"""
    _sub_sdk_map = {
        "content": ("openapi.content", "Content"),
        "content_insights": ("openapi.content_insights", "ContentInsights"),
        "players": ("openapi.players", "Players"),
        "plays": ("openapi.plays", "Plays"),
        "schedules_extended": ("openapi.schedules_extended", "SchedulesExtended"),
        "schedules": ("openapi.schedules", "Schedules"),
        "betting": ("openapi.betting", "Betting"),
        "season_schedule": ("openapi.season_schedule", "SeasonSchedule"),
        "scores": ("openapi.scores", "Scores"),
        "win_probability": ("openapi.win_probability", "WinProbability"),
        "defensive_statistics": ("openapi.defensive_statistics", "DefensiveStatistics"),
        "defensive_player_overview": (
            "openapi.defensive_player_overview",
            "DefensivePlayerOverview",
        ),
        "defensive_pass_rush_statistics": (
            "openapi.defensive_pass_rush_statistics",
            "DefensivePassRushStatistics",
        ),
        "fantasy_statistics": ("openapi.fantasy_statistics", "FantasyStatistics"),
        "player_statistics": ("openapi.player_statistics", "PlayerStatistics"),
        "player_passing_statistics": (
            "openapi.player_passing_statistics",
            "PlayerPassingStatistics",
        ),
        "player_receiving_statistics": (
            "openapi.player_receiving_statistics",
            "PlayerReceivingStatistics",
        ),
        "player_rushing_statistics": (
            "openapi.player_rushing_statistics",
            "PlayerRushingStatistics",
        ),
        "team_defense_statistics": (
            "openapi.team_defense_statistics",
            "TeamDefenseStatistics",
        ),
        "team_defense_pass_statistics": (
            "openapi.team_defense_pass_statistics",
            "TeamDefensePassStatistics",
        ),
        "team_defense_rush_statistics": (
            "openapi.team_defense_rush_statistics",
            "TeamDefenseRushStatistics",
        ),
        "team_offense_overview_statistics": (
            "openapi.team_offense_overview_statistics",
            "TeamOffenseOverviewStatistics",
        ),
        "team_offense_pass_statistics": (
            "openapi.team_offense_pass_statistics",
            "TeamOffensePassStatistics",
        ),
        "secured_videos": ("openapi.secured_videos", "SecuredVideos"),
        "filmroom": ("openapi.filmroom", "Filmroom"),
        "stats": ("openapi.stats_sdk", "StatsSDK"),
        "teams": ("openapi.teams", "Teams"),
        "experience": ("openapi.experience", "Experience"),
        "football": ("openapi.football", "Football"),
        "authentication": ("openapi.authentication", "Authentication"),
    }

    def __init__(
        self,
        server_url: str,
        nfl_auth: Union[str, Callable[[], str]],
        client: Optional[HttpClient] = None,
        async_client: Optional[AsyncHttpClient] = None,
        retry_config: OptionalNullable[RetryConfig] = UNSET,
        timeout_ms: Optional[int] = None,
        debug_logger: Optional[Logger] = None,
    ) -> None:
        r"""Instantiates the SDK configuring it with the provided parameters.

        :param nfl_auth: The nfl_auth required for authentication
        :param server_idx: The index of the server to use for all methods
        :param server_url: The server URL to use for all methods
        :param url_params: Parameters to optionally template the server URL with
        :param client: The HTTP client to use for all synchronous methods
        :param async_client: The Async HTTP client to use for all asynchronous methods
        :param retry_config: The retry configuration to use for all supported methods
        :param timeout_ms: Optional request timeout applied to each operation in milliseconds
        """
        client_supplied = True
        if client is None:
            client = httpx.Client(follow_redirects=True)
            client_supplied = False

        assert issubclass(
            type(client), HttpClient
        ), "The provided client must implement the HttpClient protocol."

        async_client_supplied = True
        if async_client is None:
            async_client = httpx.AsyncClient(follow_redirects=True)
            async_client_supplied = False

        if debug_logger is None:
            debug_logger = get_default_logger()

        assert issubclass(
            type(async_client), AsyncHttpClient
        ), "The provided async_client must implement the AsyncHttpClient protocol."

        security: Any = None
        if callable(nfl_auth):
            # pylint: disable=unnecessary-lambda-assignment
            security = lambda: models.Security(nfl_auth=nfl_auth())
        else:
            security = models.Security(nfl_auth=nfl_auth)

        BaseSDK.__init__(
            self,
            SDKConfiguration(
                client=client,
                client_supplied=client_supplied,
                async_client=async_client,
                async_client_supplied=async_client_supplied,
                security=security,
                server_url=server_url,
                retry_config=retry_config,
                timeout_ms=timeout_ms,
                debug_logger=debug_logger,
            ),
            parent_ref=self,
        )

        hooks = SDKHooks()

        # pylint: disable=protected-access
        self.sdk_configuration.__dict__["_hooks"] = hooks

        self.sdk_configuration = hooks.sdk_init(self.sdk_configuration)

        weakref.finalize(
            self,
            close_clients,
            cast(ClientOwner, self.sdk_configuration),
            self.sdk_configuration.client,
            self.sdk_configuration.client_supplied,
            self.sdk_configuration.async_client,
            self.sdk_configuration.async_client_supplied,
        )

    def dynamic_import(self, modname, retries=3):
        for attempt in range(retries):
            try:
                return importlib.import_module(modname)
            except KeyError:
                # Clear any half-initialized module and retry
                sys.modules.pop(modname, None)
                if attempt == retries - 1:
                    break
        raise KeyError(f"Failed to import module '{modname}' after {retries} attempts")

    def __getattr__(self, name: str):
        if name in self._sub_sdk_map:
            module_path, class_name = self._sub_sdk_map[name]
            try:
                module = self.dynamic_import(module_path)
                klass = getattr(module, class_name)
                instance = klass(self.sdk_configuration, parent_ref=self)
                setattr(self, name, instance)
                return instance
            except ImportError as e:
                raise AttributeError(
                    f"Failed to import module {module_path} for attribute {name}: {e}"
                ) from e
            except AttributeError as e:
                raise AttributeError(
                    f"Failed to find class {class_name} in module {module_path} for attribute {name}: {e}"
                ) from e

        raise AttributeError(
            f"'{type(self).__name__}' object has no attribute '{name}'"
        )

    def __dir__(self):
        default_attrs = list(super().__dir__())
        lazy_attrs = list(self._sub_sdk_map.keys())
        return sorted(list(set(default_attrs + lazy_attrs)))

    def __enter__(self):
        return self

    async def __aenter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        if (
            self.sdk_configuration.client is not None
            and not self.sdk_configuration.client_supplied
        ):
            self.sdk_configuration.client.close()
        self.sdk_configuration.client = None

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if (
            self.sdk_configuration.async_client is not None
            and not self.sdk_configuration.async_client_supplied
        ):
            await self.sdk_configuration.async_client.aclose()
        self.sdk_configuration.async_client = None
