"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .camerasourceenum import CameraSourceEnum
from .coachesfilevideosubtypeenum import CoachesFileVideoSubTypeEnum
from .videoauthorizations import VideoAuthorizations, VideoAuthorizationsTypedDict
from .videogameplayids import VideoGamePlayIds, VideoGamePlayIdsTypedDict
from .videotag import VideoTag, VideoTagTypedDict
from .videothumbnail import VideoThumbnail, VideoThumbnailTypedDict
from datetime import datetime
from openapi.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing import List, Literal, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class CoachesFilmVideoBackgroundTypedDict(TypedDict):
    r"""Background configuration"""


class CoachesFilmVideoBackground(BaseModel):
    r"""Background configuration"""


class CoachesFilmVideoCtaTypedDict(TypedDict):
    pass


class CoachesFilmVideoCta(BaseModel):
    pass


class CoachesFilmVideoImageTypedDict(TypedDict):
    pass


class CoachesFilmVideoImage(BaseModel):
    pass


class CoachesFilmVideoPromoAssetTypedDict(TypedDict):
    pass


class CoachesFilmVideoPromoAsset(BaseModel):
    pass


CoachesFilmVideoType = Literal["video",]
r"""Content type (always \"video\")"""


class CoachesFilmVideoVideoTypedDict(TypedDict):
    pass


class CoachesFilmVideoVideo(BaseModel):
    pass


class CoachesFilmVideoTypedDict(TypedDict):
    advertiser_id: NotRequired[Nullable[str]]
    r"""Associated advertiser ID"""
    author: NotRequired[Nullable[str]]
    r"""Content author"""
    authorizations: NotRequired[VideoAuthorizationsTypedDict]
    r"""Authorization requirements for video access"""
    background: NotRequired[CoachesFilmVideoBackgroundTypedDict]
    r"""Background configuration"""
    camera_source: NotRequired[CameraSourceEnum]
    r"""Location of the camera"""
    clip_type: NotRequired[Nullable[str]]
    r"""Type of video clip"""
    cta_link: NotRequired[Nullable[str]]
    r"""Call-to-action link"""
    cta_target: NotRequired[Nullable[str]]
    r"""Call-to-action target"""
    cta_text: NotRequired[Nullable[str]]
    r"""Call-to-action text"""
    ctas: NotRequired[List[CoachesFilmVideoCtaTypedDict]]
    r"""Call-to-action elements"""
    description: NotRequired[str]
    r"""Play description"""
    display_title: NotRequired[Nullable[str]]
    r"""Display title override"""
    duration: NotRequired[int]
    r"""Video duration in seconds"""
    end_date: NotRequired[Nullable[datetime]]
    r"""Content end date"""
    entitlement: NotRequired[Nullable[str]]
    r"""Entitlement information"""
    episode_number: NotRequired[Nullable[int]]
    r"""Episode number if part of series"""
    expiration_date: NotRequired[datetime]
    r"""Content expiration date"""
    external_id: NotRequired[str]
    r"""External video identifier"""
    fantasy_link: NotRequired[Nullable[str]]
    r"""Related fantasy content link"""
    host_network: NotRequired[Nullable[str]]
    r"""Broadcasting network"""
    id: NotRequired[Nullable[str]]
    r"""Internal content ID"""
    ids: NotRequired[VideoGamePlayIdsTypedDict]
    images: NotRequired[List[CoachesFilmVideoImageTypedDict]]
    r"""Associated images"""
    intended_audience: NotRequired[Nullable[str]]
    r"""Target audience"""
    intro_end: NotRequired[Nullable[str]]
    r"""Introduction end timestamp"""
    language: NotRequired[Nullable[str]]
    r"""Content language"""
    last_updated: NotRequired[Nullable[datetime]]
    r"""Last update timestamp"""
    mcp_playback_id: NotRequired[str]
    r"""Media control platform playback ID"""
    mobile_link: NotRequired[Nullable[str]]
    r"""Mobile-specific link"""
    mobile_title: NotRequired[Nullable[str]]
    r"""Mobile-specific title"""
    original_air_date: NotRequired[datetime]
    r"""Original broadcast air date"""
    outro_start: NotRequired[Nullable[str]]
    r"""Outro start timestamp"""
    play_ids: NotRequired[List[str]]
    r"""Play identifiers associated with this video"""
    pre_roll_disabled: NotRequired[bool]
    r"""Whether pre-roll ads are disabled"""
    promo_assets: NotRequired[List[CoachesFilmVideoPromoAssetTypedDict]]
    r"""Promotional assets"""
    promo_link: NotRequired[Nullable[str]]
    r"""Promotional link"""
    promo_target: NotRequired[str]
    r"""Promotional link target"""
    promo_text: NotRequired[Nullable[str]]
    r"""Promotional text"""
    publish_date: NotRequired[datetime]
    r"""Content publish date"""
    radio_station: NotRequired[Nullable[str]]
    r"""Associated radio station"""
    series: NotRequired[Nullable[str]]
    r"""Series information"""
    series_season: NotRequired[Nullable[str]]
    r"""Series season if applicable"""
    series_title: NotRequired[Nullable[str]]
    r"""Series title if part of series"""
    slug: NotRequired[Nullable[str]]
    r"""URL slug"""
    start_date: NotRequired[Nullable[datetime]]
    r"""Content start date"""
    sub_type: NotRequired[CoachesFileVideoSubTypeEnum]
    r"""Coaches film sub types"""
    summary: NotRequired[Nullable[str]]
    r"""Content summary"""
    tags: NotRequired[List[VideoTagTypedDict]]
    r"""Content tags and metadata"""
    thumbnail: NotRequired[VideoThumbnailTypedDict]
    title: NotRequired[str]
    r"""Video title"""
    type: NotRequired[CoachesFilmVideoType]
    r"""Content type (always \"video\")"""
    videos: NotRequired[List[CoachesFilmVideoVideoTypedDict]]
    r"""Additional video information"""
    web_link: NotRequired[Nullable[str]]
    r"""Web-specific link"""


class CoachesFilmVideo(BaseModel):
    advertiser_id: Annotated[
        OptionalNullable[str], pydantic.Field(alias="advertiserId")
    ] = UNSET
    r"""Associated advertiser ID"""

    author: OptionalNullable[str] = UNSET
    r"""Content author"""

    authorizations: Optional[VideoAuthorizations] = None
    r"""Authorization requirements for video access"""

    background: Optional[CoachesFilmVideoBackground] = None
    r"""Background configuration"""

    camera_source: Annotated[
        Optional[CameraSourceEnum], pydantic.Field(alias="cameraSource")
    ] = None
    r"""Location of the camera"""

    clip_type: Annotated[OptionalNullable[str], pydantic.Field(alias="clipType")] = (
        UNSET
    )
    r"""Type of video clip"""

    cta_link: Annotated[OptionalNullable[str], pydantic.Field(alias="ctaLink")] = UNSET
    r"""Call-to-action link"""

    cta_target: Annotated[OptionalNullable[str], pydantic.Field(alias="ctaTarget")] = (
        UNSET
    )
    r"""Call-to-action target"""

    cta_text: Annotated[OptionalNullable[str], pydantic.Field(alias="ctaText")] = UNSET
    r"""Call-to-action text"""

    ctas: Optional[List[CoachesFilmVideoCta]] = None
    r"""Call-to-action elements"""

    description: Optional[str] = None
    r"""Play description"""

    display_title: Annotated[
        OptionalNullable[str], pydantic.Field(alias="displayTitle")
    ] = UNSET
    r"""Display title override"""

    duration: Optional[int] = None
    r"""Video duration in seconds"""

    end_date: Annotated[OptionalNullable[datetime], pydantic.Field(alias="endDate")] = (
        UNSET
    )
    r"""Content end date"""

    entitlement: OptionalNullable[str] = UNSET
    r"""Entitlement information"""

    episode_number: Annotated[
        OptionalNullable[int], pydantic.Field(alias="episodeNumber")
    ] = UNSET
    r"""Episode number if part of series"""

    expiration_date: Annotated[
        Optional[datetime], pydantic.Field(alias="expirationDate")
    ] = None
    r"""Content expiration date"""

    external_id: Annotated[Optional[str], pydantic.Field(alias="externalId")] = None
    r"""External video identifier"""

    fantasy_link: Annotated[
        OptionalNullable[str], pydantic.Field(alias="fantasyLink")
    ] = UNSET
    r"""Related fantasy content link"""

    host_network: Annotated[
        OptionalNullable[str], pydantic.Field(alias="hostNetwork")
    ] = UNSET
    r"""Broadcasting network"""

    id: OptionalNullable[str] = UNSET
    r"""Internal content ID"""

    ids: Optional[VideoGamePlayIds] = None

    images: Optional[List[CoachesFilmVideoImage]] = None
    r"""Associated images"""

    intended_audience: Annotated[
        OptionalNullable[str], pydantic.Field(alias="intendedAudience")
    ] = UNSET
    r"""Target audience"""

    intro_end: Annotated[OptionalNullable[str], pydantic.Field(alias="introEnd")] = (
        UNSET
    )
    r"""Introduction end timestamp"""

    language: OptionalNullable[str] = UNSET
    r"""Content language"""

    last_updated: Annotated[
        OptionalNullable[datetime], pydantic.Field(alias="lastUpdated")
    ] = UNSET
    r"""Last update timestamp"""

    mcp_playback_id: Annotated[Optional[str], pydantic.Field(alias="mcpPlaybackId")] = (
        None
    )
    r"""Media control platform playback ID"""

    mobile_link: Annotated[
        OptionalNullable[str], pydantic.Field(alias="mobileLink")
    ] = UNSET
    r"""Mobile-specific link"""

    mobile_title: Annotated[
        OptionalNullable[str], pydantic.Field(alias="mobileTitle")
    ] = UNSET
    r"""Mobile-specific title"""

    original_air_date: Annotated[
        Optional[datetime], pydantic.Field(alias="originalAirDate")
    ] = None
    r"""Original broadcast air date"""

    outro_start: Annotated[
        OptionalNullable[str], pydantic.Field(alias="outroStart")
    ] = UNSET
    r"""Outro start timestamp"""

    play_ids: Annotated[Optional[List[str]], pydantic.Field(alias="playIds")] = None
    r"""Play identifiers associated with this video"""

    pre_roll_disabled: Annotated[
        Optional[bool], pydantic.Field(alias="preRollDisabled")
    ] = False
    r"""Whether pre-roll ads are disabled"""

    promo_assets: Annotated[
        Optional[List[CoachesFilmVideoPromoAsset]], pydantic.Field(alias="promoAssets")
    ] = None
    r"""Promotional assets"""

    promo_link: Annotated[OptionalNullable[str], pydantic.Field(alias="promoLink")] = (
        UNSET
    )
    r"""Promotional link"""

    promo_target: Annotated[Optional[str], pydantic.Field(alias="promoTarget")] = (
        "_self"
    )
    r"""Promotional link target"""

    promo_text: Annotated[OptionalNullable[str], pydantic.Field(alias="promoText")] = (
        UNSET
    )
    r"""Promotional text"""

    publish_date: Annotated[Optional[datetime], pydantic.Field(alias="publishDate")] = (
        None
    )
    r"""Content publish date"""

    radio_station: Annotated[
        OptionalNullable[str], pydantic.Field(alias="radioStation")
    ] = UNSET
    r"""Associated radio station"""

    series: OptionalNullable[str] = UNSET
    r"""Series information"""

    series_season: Annotated[
        OptionalNullable[str], pydantic.Field(alias="seriesSeason")
    ] = UNSET
    r"""Series season if applicable"""

    series_title: Annotated[
        OptionalNullable[str], pydantic.Field(alias="seriesTitle")
    ] = UNSET
    r"""Series title if part of series"""

    slug: OptionalNullable[str] = UNSET
    r"""URL slug"""

    start_date: Annotated[
        OptionalNullable[datetime], pydantic.Field(alias="startDate")
    ] = UNSET
    r"""Content start date"""

    sub_type: Annotated[
        Optional[CoachesFileVideoSubTypeEnum], pydantic.Field(alias="subType")
    ] = None
    r"""Coaches film sub types"""

    summary: OptionalNullable[str] = UNSET
    r"""Content summary"""

    tags: Optional[List[VideoTag]] = None
    r"""Content tags and metadata"""

    thumbnail: Optional[VideoThumbnail] = None

    title: Optional[str] = None
    r"""Video title"""

    type: Optional[CoachesFilmVideoType] = None
    r"""Content type (always \"video\")"""

    videos: Optional[List[CoachesFilmVideoVideo]] = None
    r"""Additional video information"""

    web_link: Annotated[OptionalNullable[str], pydantic.Field(alias="webLink")] = UNSET
    r"""Web-specific link"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "advertiserId",
            "author",
            "authorizations",
            "background",
            "cameraSource",
            "clipType",
            "ctaLink",
            "ctaTarget",
            "ctaText",
            "ctas",
            "description",
            "displayTitle",
            "duration",
            "endDate",
            "entitlement",
            "episodeNumber",
            "expirationDate",
            "externalId",
            "fantasyLink",
            "hostNetwork",
            "id",
            "ids",
            "images",
            "intendedAudience",
            "introEnd",
            "language",
            "lastUpdated",
            "mcpPlaybackId",
            "mobileLink",
            "mobileTitle",
            "originalAirDate",
            "outroStart",
            "playIds",
            "preRollDisabled",
            "promoAssets",
            "promoLink",
            "promoTarget",
            "promoText",
            "publishDate",
            "radioStation",
            "series",
            "seriesSeason",
            "seriesTitle",
            "slug",
            "startDate",
            "subType",
            "summary",
            "tags",
            "thumbnail",
            "title",
            "type",
            "videos",
            "webLink",
        ]
        nullable_fields = [
            "advertiserId",
            "author",
            "clipType",
            "ctaLink",
            "ctaTarget",
            "ctaText",
            "displayTitle",
            "endDate",
            "entitlement",
            "episodeNumber",
            "fantasyLink",
            "hostNetwork",
            "id",
            "intendedAudience",
            "introEnd",
            "language",
            "lastUpdated",
            "mobileLink",
            "mobileTitle",
            "outroStart",
            "promoLink",
            "promoText",
            "radioStation",
            "series",
            "seriesSeason",
            "seriesTitle",
            "slug",
            "startDate",
            "summary",
            "webLink",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
