"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .networktypeenum import NetworkTypeEnum
from openapi.types import BaseModel
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class RefreshTokenRequestTypedDict(TypedDict):
    client_key: NotRequired[str]
    r"""Client application identifier key"""
    client_secret: NotRequired[str]
    r"""Client application secret for authentication"""
    device_id: NotRequired[str]
    r"""Unique device identifier (UUID format)"""
    device_info: NotRequired[str]
    r"""Base64-encoded JSON containing device information such as: {\"model\":\"desktop\",\"version\":\"Chrome\",\"osName\":\"Windows\",\"osVersion\":\"10\"}"""
    network_type: NotRequired[NetworkTypeEnum]
    r"""Type of network connection"""
    refresh_token: NotRequired[str]
    r"""Valid refresh token from previous authentication"""
    signature_timestamp: NotRequired[str]
    r"""Unix timestamp for signature verification"""
    uid: NotRequired[str]
    r"""User identifier hash"""
    uid_signature: NotRequired[str]
    r"""HMAC signature for request verification"""


class RefreshTokenRequest(BaseModel):
    client_key: Annotated[Optional[str], pydantic.Field(alias="clientKey")] = None
    r"""Client application identifier key"""

    client_secret: Annotated[Optional[str], pydantic.Field(alias="clientSecret")] = None
    r"""Client application secret for authentication"""

    device_id: Annotated[Optional[str], pydantic.Field(alias="deviceId")] = None
    r"""Unique device identifier (UUID format)"""

    device_info: Annotated[Optional[str], pydantic.Field(alias="deviceInfo")] = None
    r"""Base64-encoded JSON containing device information such as: {\"model\":\"desktop\",\"version\":\"Chrome\",\"osName\":\"Windows\",\"osVersion\":\"10\"}"""

    network_type: Annotated[
        Optional[NetworkTypeEnum], pydantic.Field(alias="networkType")
    ] = None
    r"""Type of network connection"""

    refresh_token: Annotated[Optional[str], pydantic.Field(alias="refreshToken")] = None
    r"""Valid refresh token from previous authentication"""

    signature_timestamp: Annotated[
        Optional[str], pydantic.Field(alias="signatureTimestamp")
    ] = None
    r"""Unix timestamp for signature verification"""

    uid: Optional[str] = None
    r"""User identifier hash"""

    uid_signature: Annotated[Optional[str], pydantic.Field(alias="uidSignature")] = None
    r"""HMAC signature for request verification"""
