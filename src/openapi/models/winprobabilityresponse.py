"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .playwinprobability import PlayWinProbability, PlayWinProbabilityTypedDict
from openapi.types import BaseModel
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class WinProbabilityResponseTypedDict(TypedDict):
    game_id: NotRequired[int]
    r"""Game identifier (10-digit format YYYYMMDDNN)"""
    game_key: NotRequired[int]
    r"""Unique game key identifier"""
    plays: NotRequired[List[PlayWinProbabilityTypedDict]]
    r"""Chronological list of all plays with win probability data"""
    pregame_away_team_win_probability: NotRequired[float]
    r"""Away team's win probability before the game started"""
    pregame_home_team_win_probability: NotRequired[float]
    r"""Home team's win probability before the game started"""


class WinProbabilityResponse(BaseModel):
    game_id: Annotated[Optional[int], pydantic.Field(alias="gameId")] = None
    r"""Game identifier (10-digit format YYYYMMDDNN)"""

    game_key: Annotated[Optional[int], pydantic.Field(alias="gameKey")] = None
    r"""Unique game key identifier"""

    plays: Optional[List[PlayWinProbability]] = None
    r"""Chronological list of all plays with win probability data"""

    pregame_away_team_win_probability: Annotated[
        Optional[float], pydantic.Field(alias="pregameAwayTeamWinProbability")
    ] = None
    r"""Away team's win probability before the game started"""

    pregame_home_team_win_probability: Annotated[
        Optional[float], pydantic.Field(alias="pregameHomeTeamWinProbability")
    ] = None
    r"""Home team's win probability before the game started"""
