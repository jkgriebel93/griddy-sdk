"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .gamephaseenum import GamePhaseEnum
from .teamscore import TeamScore, TeamScoreTypedDict
from openapi.types import BaseModel
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GameScoreTypedDict(TypedDict):
    away_score: NotRequired[int]
    r"""Away team current score"""
    home_score: NotRequired[int]
    r"""Home team current score"""
    home_team_score: NotRequired[TeamScoreTypedDict]
    phase: NotRequired[GamePhaseEnum]
    r"""Current phase of the game"""
    time: NotRequired[str]
    r"""Game clock time or status"""
    visitor_team_score: NotRequired[TeamScoreTypedDict]


class GameScore(BaseModel):
    away_score: Annotated[Optional[int], pydantic.Field(alias="awayScore")] = None
    r"""Away team current score"""

    home_score: Annotated[Optional[int], pydantic.Field(alias="homeScore")] = None
    r"""Home team current score"""

    home_team_score: Annotated[
        Optional[TeamScore], pydantic.Field(alias="homeTeamScore")
    ] = None

    phase: Optional[GamePhaseEnum] = None
    r"""Current phase of the game"""

    time: Optional[str] = None
    r"""Game clock time or status"""

    visitor_team_score: Annotated[
        Optional[TeamScore], pydantic.Field(alias="visitorTeamScore")
    ] = None
