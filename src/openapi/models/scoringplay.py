"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .scoretypeenum import ScoreTypeEnum
from .team import Team, TeamTypedDict
from openapi.types import BaseModel
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ScoringPlayTypedDict(TypedDict):
    away_score: NotRequired[int]
    description: NotRequired[str]
    game_clock: NotRequired[str]
    home_score: NotRequired[int]
    quarter: NotRequired[int]
    score_type: NotRequired[ScoreTypeEnum]
    r"""Type of scoring play"""
    team: NotRequired[TeamTypedDict]


class ScoringPlay(BaseModel):
    away_score: Annotated[Optional[int], pydantic.Field(alias="awayScore")] = None

    description: Optional[str] = None

    game_clock: Annotated[Optional[str], pydantic.Field(alias="gameClock")] = None

    home_score: Annotated[Optional[int], pydantic.Field(alias="homeScore")] = None

    quarter: Optional[int] = None

    score_type: Annotated[
        Optional[ScoreTypeEnum], pydantic.Field(alias="scoreType")
    ] = None
    r"""Type of scoring play"""

    team: Optional[Team] = None
